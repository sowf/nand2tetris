// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a= x, b= false, sel= zx, out= muxX);
    Not16(in= muxX, out= notMuxX);
    Mux16(a= muxX, b= notMuxX, sel= nx, out= preparedX);

    Mux16(a= y, b= false, sel= zy, out= muxY);
    Not16(in= muxY, out= notMuxY);
    Mux16(a= muxY, b= notMuxY, sel= ny, out= preparedY);

    Add16(a = preparedX, b = preparedY, out = addXY);
    And16(a= preparedX, b= preparedY, out= andXY);

    Mux16(a= andXY, b= addXY, sel= f, out= output);
    Not16(in= output, out= notOutput);

    Mux16(a= output, b= notOutput, sel= no, out= pOut);
    And16(a= pOut, b= true, out= out);

    And16(a= pOut, b[0..14]= false, b[15] = true, out[15]= ng);
    
    // Hack because of Web-IDE bug
    // Can be used Or16Way instead
    And16(a= pOut, b[0] = true, b[1..15]= false, out[0]= and0); 
    And16(a= pOut, b[0]= false, b[1] = true, b[2..15]= false, out[1]= and1); 
    And16(a= pOut, b[0..1]= false, b[2] = true, b[3..15]= false, out[2]= and2); 
    And16(a= pOut, b[0..2]= false, b[3] = true, b[4..15]= false, out[3]= and3); 
    And16(a= pOut, b[0..3]= false, b[4] = true, b[5..15]= false, out[4]= and4); 
    And16(a= pOut, b[0..4]= false, b[5] = true, b[6..15]= false, out[5]= and5); 
    And16(a= pOut, b[0..5]= false, b[6] = true, b[7..15]= false, out[6]= and6); 
    And16(a= pOut, b[0..6]= false, b[7] = true, b[8..15]= false, out[7]= and7); 
    And16(a= pOut, b[0..7]= false, b[8] = true, b[9..15]= false, out[8]= and8); 
    And16(a= pOut, b[0..8]= false, b[9] = true, b[10..15]= false, out[9]= and9); 
    And16(a= pOut, b[0..9]= false, b[10] = true, b[11..15]= false, out[10]= and10); 
    And16(a= pOut, b[0..10]= false, b[11] = true, b[12..15]= false, out[11]= and11); 
    And16(a= pOut, b[0..11]= false, b[12] = true, b[13..15]= false, out[12]= and12); 
    And16(a= pOut, b[0..12]= false, b[13] = true, b[14..15]= false, out[13]= and13); 
    And16(a= pOut, b[0..13]= false, b[14] = true, b[15]= false, out[14]= and14); 
    And16(a= pOut, b[0..14]= false, b[15] = true, out[15]= and15); 
    
    Or(a= and0, b=and1, out=or1);
    Or(a= or1, b=and2, out=or2);
    Or(a= or2, b=and3, out=or3);
    Or(a= or3, b=and4, out=or4);
    Or(a= or4, b=and5, out=or5);
    Or(a= or5, b=and6, out=or6);
    Or(a= or6, b=and7, out=or7);
    Or(a= or7, b=and8, out=or8);
    Or(a= or8, b=and9, out=or9);
    Or(a= or9, b=and10, out=or10);
    Or(a= or10, b=and11, out=or11);
    Or(a= or11, b=and12, out=or12);
    Or(a= or12, b=and13, out=or13);
    Or(a= or13, b=and14, out=or14);
    Or(a= or14, b=and15, out=or15);
    Not(in= or15, out= zr);
}